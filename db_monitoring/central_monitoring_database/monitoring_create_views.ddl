create or replace view mon.pck as
select
    MEMBER,
    SECTION_TYPE ,
    AVG_CPU_TIME,
    EXECUTABLE_ID,
    INSERT_TIMESTAMP,
    NUM_EXECUTIONS,
    PREP_TIME,
    STMT_EXEC_TIME,
    QUERY_COST_ESTIMATE,
    STMTID,
    TOTAL_ACT_WAIT_TIME,
    TOTAL_CPU_TIME,
    POOL_READ_TIME,
    POOL_WRITE_TIME,
    DIRECT_READ_TIME,
    DIRECT_WRITE_TIME,
    LOCK_WAIT_TIME,
    TOTAL_SECTION_SORT_TIME,
    TOTAL_SECTION_SORT_PROC_TIME,
    TOTAL_SECTION_SORTS,
    LOCK_ESCALS,
    LOCK_WAITS,
    ROWS_MODIFIED,
    ROWS_READ,
    ROWS_RETURNED,
    DIRECT_READS,
    DIRECT_WRITES,
    POOL_DATA_L_READS,
    POOL_INDEX_L_READS,
    POOL_DATA_P_READS,
    POOL_INDEX_P_READS,
    POOL_DATA_WRITES,
    POOL_INDEX_WRITES,
    TOTAL_SORTS,
    SORT_OVERFLOWS,
    LOG_DISK_WAIT_TIME,
    LOG_DISK_WAITS_TOTAL,
    TOTAL_SECTION_TIME,
    TOTAL_SECTION_PROC_TIME,
    PREFETCH_WAIT_TIME,
    PREFETCH_WAITS,
    ROWS_DELETED,
    ROWS_INSERTED,
    ROWS_UPDATED,
    TOTAL_HASH_JOINS,
    HASH_JOIN_OVERFLOWS,
    HASH_JOIN_SMALL_OVERFLOWS,
    TOTAL_HASH_GRPBYS,
    HASH_GRPBY_OVERFLOWS,
    dt,
    tm,
    ts,
    hostname
from mon.pckcache;

create or replace view mon.activity as
select
	TOTAL_SORTS,
	SORT_OVERFLOWS,
	SORT_SHRHEAP_TOP,
	SORT_SHRHEAP_ALLOCATED,
	SORT_HEAP_TOP,
	SORT_HEAP_ALLOCATED,
	SORT_CONSUMER_HEAP_TOP,
	SORT_CONSUMER_SHRHEAP_TOP,
	ACTIVE_SORTS,
	ACTIVE_SORTS_TOP,
	ACTIVE_SORT_CONSUMERS_TOP,
	ACTIVE_SORT_CONSUMERS,
	ROWS_READ,
	ROWS_RETURNED,
	case when ROWS_READ > 0 then
	ROWS_RETURNED/ROWS_READ
	else 0 end as rows_returned_per_read,
	TOTAL_ACT_TIME,
	TOTAL_ACT_WAIT_TIME,
	POOL_READ_TIME,
	POOL_WRITE_TIME,
	DIRECT_READ_TIME,
	DIRECT_WRITE_TIME,
	LOCK_WAIT_TIME,
	TOTAL_SECTION_SORT_TIME,
	TOTAL_SECTION_SORT_PROC_TIME,
	TOTAL_SECTION_SORTS,
	ROWS_DELETED,
	ROWS_INSERTED,
	ROWS_UPDATED,
	TOTAL_HASH_JOINS,
	dt,
    tm,
    ts,
    hostname
from mon.act;